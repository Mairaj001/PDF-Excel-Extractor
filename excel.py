import os
import pandas as pd
from langchain.text_splitter import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain_openai import OpenAI
import openai

# Set OpenAI API key (use environment variables for security)
openai.api_key = os.getenv("OPENAI_API_KEY")

def process_excel_and_query(excel_file, query):
    """
    Process the Excel file and query to generate a response using LangChain and OpenAI.

    Parameters:
        excel_file (FileStorage): The uploaded Excel file.
        query (str): The query to be processed.

    Returns:
        str: The response generated by OpenAI.
    """
    try:
        # Load Excel data into a Pandas dataframe
        df = pd.read_excel(excel_file, engine='openpyxl')  # No need for a file path
        
        # Convert the dataframe to a string
        raw_text = df.to_string()

        # Split text into chunks
        text_splitter = CharacterTextSplitter(
            separator='\n',
            chunk_size=800,
            chunk_overlap=200,
            length_function=len,
        )
        text_chunks = text_splitter.split_text(raw_text)

        # Create a FAISS index from text chunks
        embedding = OpenAIEmbeddings()
        faiss_index = FAISS.from_texts(text_chunks, embedding)

        # Search for similar documents
        docs = faiss_index.similarity_search(query)

        # Answer questions using the QA chain
        chain = load_qa_chain(OpenAI(), chain_type="stuff")
        answers = chain.invoke({"input_documents": docs, "question": query})

        # Use ChatGPT to generate a response
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": f"You are an assistant. Explain in detail about the question using the Excel file we used to search and also perform calculations if required. If the required prompt is not related to query, just state that the Excel file doesn't have the necessary information: {docs}."},
                {"role": "user", "content": query}
            ]
        )
        
        return response['choices'][0]['message']['content']
    
    except Exception as e:
        return f"Error processing the request: {e}"
